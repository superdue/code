2.6 集合

集合（set）用来存储无序不重复对象。所谓不重复对象，除了不是同一个对象外，还包括“值”不能相同。集合只能存储可哈希对象，一样有只读版本 frozenset。

`判重公式：(a is b) or (hash(a) == hash(b) and eq(a, b))`

在内部实现上，集合和字典非常相似，除了 Entry 没有 value 字段。集合不是序列类型，不能像列表那样按序号访问，也不能做切片操作。

>>> s = set("abc")
>>> s
set(['a', 'c', 'b'])
>>> {v for v in "abc"}
set(['a', 'c', 'b'])
>>> "b" in s
True
>>> s.add("d")
>>> s
set(['a', 'c', 'b', 'd'])
>>> s.remove("b")
>>> s
set(['a', 'c', 'd'])
>>> s.discard("a")
>>> s
set(['c', 'd'])
>>> s.update(set("abcd"))
>>> s
set(['a', 'c', 'b', 'd'])
>>> s.pop()
'a'
>>> s
set(['c', 'b', 'd'])
>>>

集合和字典、列表最大的不同除了元素不重复外，还支持集合运算。

>>> "c" in set("abcd")
True
>>> set("abc") is set("abc")
False
>>> set("abc") == set("abc")
True
>>> set("abc") != set("abc")
False
>>> set("abcd") >= set("ab")
True
>>> set("bc") < set("abcd")
True
>>> set("abcd") | set("cdef")
set(['a', 'c', 'b', 'e', 'd', 'f'])
>>> set("abcd") & set("abx")
set(['a', 'b'])
>>> set("abcd") - set("ab")
set(['c', 'd'])
>>> set("abx") ^ set("aby")
set(['y', 'x'])
>>> set("abcd").isdisjoint("ab")
False
>>>

更新操作：

>>> s = set("abcd")
>>> s |= set("cdef")
>>> s
set(['a', 'c', 'b', 'e', 'd', 'f'])
>>> s = set("abcd")
>>> s &= set("cdef")
>>> s
set(['c', 'd'])
>>> s = set("abx")
>>> s -= set("abcdy")
>>> s
set(['x'])
>>> s = set("abx")
>>> s ^= set("aby")
>>> s
set(['y', 'x'])
>>>

集合和字典主键都必须是可哈希对象，但常用的list、dict、set、defaultdict、OrderedDict 都是不可哈希的，仅有 tuple、frozenset 可用。

>>> hash([])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unhashable type: 'list'
>>> hash({})
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unhashable type: 'dict'
>>> hash(set())
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unhashable type: 'set'
>>> hash(tuple()), hash(frozenset())
(3527539, -32682612)
>>>

如果想把自定义类型放入集合，需要保证 hash 和 euqals 的结果都相同才能去重。

>>> class User(object):
...     def __init__(self, name):
...         self.name = name
...
>>> hash(User("tom"))
-939612500
>>> hash(User("tom"))
-939612494
>>> class User(object):
...     def __init__(self, name):
...         self.name = name
...     def __hash__(self):
...         return hash(self.name)
...     def __eq__(self, o):
...         if not o or not isinstance(o, User): return false
...         return self.name == o.name
...
>>> s = set()
>>> s.add(User("tom"))
>>> s.add(User("tom"))
>>> s
set([<__main__.User object at 0x7fea6cac>])
>>>