2.5 字典

字典（dict）采用开放地址法的哈希表实现。

- 自带元素容量为 8 的 smalltable，只有“超出”时才到堆上额外分配元素表内存。
- 虚拟机缓存 80 个字典复用对象，但在堆上分配的元素表内存会被释放。
- 按需动态调整容量。扩容或收缩操作都将重新分配内存，重新哈希。
- 删除元素操作不会立即收缩内存。

创建字典：
>>> {}
{}
>>> {"a":1,"b":2}
{'a': 1, 'b': 2}
>>> dict(a=1,b=2)
{'a': 1, 'b': 2}
>>> dict((["a",1],["b",2]))
{'a': 1, 'b': 2}
>>> dict(zip("ab", range(2)))
{'a': 0, 'b': 1}
>>> dict(map(None,"abc",range(2)))
{'a': 0, 'c': None, 'b': 1}
>>> dict.fromkeys("abc",1)
{'a': 1, 'c': 1, 'b': 1}
>>> {k:v for k,v in zip("abc",range(3))}
{'a': 0, 'c': 2, 'b': 1}
>>>

基本操作：
>>> d = {"a":1,"b":2}
>>> "b" in d
True
>>> d = {"a":1,"b":2}
>>> del d["b"]
>>> d
{'a': 1}
>>> d = {"a":1}
>>> d.update({"c":3})
>>> d
{'a': 1, 'c': 3}
>>> d = {"a":1,"b":2}
>>> d.pop("b")
2
>>> d
{'a': 1}
>>> d.pop("a"), d
(1, {})
>>> d = {"a":1,"b":2}
>>> d.popitem()
('a', 1)
>>>

默认返回值：
>>> d = {"a":1,"b":2}
>>> d.get("c")
>>> d.get("d",123)
123
>>> d.setdefault("a",100)
1
>>> d.setdefault("c",200)
200
>>> d
{'a': 1, 'c': 200, 'b': 2}
>>>

迭代器操作：
>>> d = {"a":1,"b":2}
>>> d.keys()
['a', 'b']
>>> d.values()
[1, 2]
>>> d.items()
[('a', 1), ('b', 2)]
>>> for k in d: print k, d[k]
...
a 1
b 2
>>> for k,v in d.items(): print k, v
...
a 1
b 2
>>>

对于大字典，调用 keys()、values()、items() 会构造同样巨大的列表。建议用迭代替代，以减少内存开销。
>>> d = {"a":1,"b":2}
>>> d.iterkeys()
<dictionary-keyiterator object at 0x7fea3af4>
>>> d.itervalues()
<dictionary-valueiterator object at 0x7fea3acc>
>>> d.iteritems()
<dictionary-itemiterator object at 0x7fea3b1c>
>>> for k,v in d.iteritems(): print k, v
...
a 1
b 2
>>>

视图

要判断两个字典间的差异，使用视图是最简便的做法。
Type "help", "copyright", "credits" or "license" for more information.
>>> d1 = dict(a=1,b=2)
>>> d2 = dict(b=2,c=3)
>>> d1 & d2
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unsupported operand type(s) for &: 'dict' and 'dict'
>>> v1 = d1.viewitems()
>>> v2 = d2.viewitems()
>>> v1 & v2
set([('b', 2)])
>>> v1 | v2
set([('a', 1), ('b', 2), ('c', 3)])
>>> v1 - v2
set([('a', 1)])
>>> v1 ^ v2
set([('a', 1), ('c', 3)])
>>> ('a', 1) in v1
True
>>>

视图让某些操作变得更加简便，比如在不引入数据项的情况下更新字典内容。
Type "help", "copyright", "credits" or "license" for more information.
>>> a = dict(x=1)
>>> b = dict(x=10,y=20)
>>> a.update({k:b[k] for k in a.viewkeys() & b.viewkeys()})
>>> a
{'x': 10}
>>>

视图会和字典同步变更。
>>> d = {"a":1}
>>> v = d.viewitems()
>>> v
dict_items([('a', 1)])
>>> d["b"] = 2
>>> v
dict_items([('a', 1), ('b', 2)])
>>> del d["a"]
>>> v
dict_items([('b', 2)])
>>>

扩展

当访问的 key 不存在时，defaultdict 自动调用 factory 对象创建所需键值。factory 可以是任何无参数或 callable 对象。
>>> from collections import defaultdict
>>> d = defaultdict(list)
>>> d["a"].append(1)
>>> d["a"].append(2)
>>> d["a"]
[1, 2]
>>>

字典是哈希表，默认是无序的。如果希望按照元素添加而序输出结果，可以用 OrderedDict。
>>> from collections import OrderedDict
>>> d = dict()
>>> d["a"] = 1
>>> d["b"] = 2
>>> d["c"] = 3
>>> for k,v in d.items(): print k, v
...
a 1
c 3
b 2
>>> od = OrderedDict()
>>> od["a"] = 1
>>> od["b"] = 2
>>> od["c"] = 3
>>> for k,v in od.items(): print k, v
...
a 1
b 2
c 3
>>> od.popitem()
('c', 3)
>>> od.popitem()
('b', 2)
>>> od.popitem()
('a', 1)
>>>