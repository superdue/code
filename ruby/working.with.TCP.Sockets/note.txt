Berkeley套接字API最先于1986年出现在BSD操作系统4.2版本中。该操作系统是当时刚刚提出的TCP的首个实现。

Berkeley套接字API之所以能够屹立不倒的一个关键原因就是:你可以在无需了解底层协议的情况下使用套接字。

Berkeley套接字API是一种编程API,运作在实际的协议实现之上。它关注的是连接两个断点(endpoint)共享数据,而非处理分组和序列号。

有些有关网络互联的书籍重点关注底层协议及其错综复杂的细节,甚至会在诸如UDP协议或是原始套接字上重新实现TCP。

ch01.create.socket

socket库是Ruby标准库的组成部分。同openssl,zlib及curses这些库类似,socket库与其所依赖的C语言库之间是thin binding关系,socket库在多个
Ruby发布版中一直都很稳定。

IPv4和寻址,

环回地址,和网卡接口不同,这是一个和硬件无关,完全虚拟的接口。发送到环回接口上的数据立即会在同一个接口上被接收。配合环回地址,你就可以将网络搭建
在本地主机中。

IPv4地址已经用完了。http://www.nro.net/news/ipv4-free-pool-depleted

IPv4由4组数字组成,各自范围在0~255。每一组数字可以用8位二进制数据来表示,合计共需32位二进制。这意味着有2^32或43亿个地址。

IPv6采用了一种不同的格式,可以拥有天文数字级别的独立IP地址。

HTTP默认在端口80上进行通信,FTP的端口是21。实际上有一个组织负责维护这个列表。http://www.iana.org/

尽管就创建套接字来说,有很多更高级别的抽象,但Ruby可以让你使用符号(而非常量)来描述各种选项,因此你可以用:INET和:STREAM分别描述
Socket::AF_INET以及Socket::SOCK_STREAM

1) Unix手册页提供了有关底层系统函数(C语言代码)的文档。Ruby的套接字库便是在此基础上构建的。尽管手册页涉及的都是底层内容,但是可以让你了解某个
系统调用的作用,这一点正是Ruby文档所欠缺的。它还可以告诉你该系统调用可能出现的错误代码。

`$ man 2 socket`asdfd

2告诉man程序查看手册页的第2节

- 节1: 一般命令
- 节2: 系统调用
- 节3: C库函数
- 节4: 特殊文件
- 节5: 文件格式
- 节7: 提供了各种话题(注:topic, 难道不应该翻译成主题么)的综述. tcp(7)就很有意思

套接字角色: (1) 发起者(initiator) (2) 侦听者(listener)

生命周期:
1. 创建
2. 绑定
3. 侦听
4. 接受
5. 关闭

规则1: 不要使用0~1024之间的端口,保留给系统用的,http: 80, smtp: 25, rsync: 873,绑定到这些端口通常需要root权限
规则2: 不要使用49000~65535之间的端口,这些都是临时(ephemeral)端口。通常是由那些不需要运行在预定义端口,而只是需要一些端口作为临时只需的
服务使用。它们也是后面索要讲到的连接协商(connection negotiation)过程的一部分。
除此之外,1025~48999之间端口的使用是一视同仁的。
http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt

如果你希望侦听每一个接口,那么可以使用0.0.0.0,这样会绑定到所有可用的接口,环回接口等。

*侦听队列*

这个数字表示服务器套接字能够容纳的待处理(pending)的最大连接数。待处理的连接列表被称作侦听队列。
假设服务器正忙于处理某个客户端连接,如果这时其他新的客户端连接到达,将会被置于侦听队列,如果新的客户端连接到达且侦听队列已满,那么客户端将会
产生Errno::ECONNREFUSED

通过在运行时查看Socket::SOMAXCONN可以获知当前所允许的最大的侦听队列长度

$ echo ohai | nc localhost 4481

accept只不过就是将还未处理的连接从队列中弹出(pop)而已,如果队列为空,那么它就一直等,直到有连接被加入队列为止。

第二个元素是一个Addrinfo信息,该对象描述了客户端连接的远程地址

Addrinfo是一个Ruby类,描述了一台主机及其端口号,它将端口信息进行了包装。可以使用Addrinfo.tcp('localhost', 4481)构建

既然 connection.remote_address跟addrinfo一样,那么还要addrinfo干嘛
但奇怪的是,他们的hash值并不一样。

文件描述符编号是内核用于跟踪当前进程所打开文件的一种方法。

套接字是文件,至少在Unix世界中,所有的一切都被视为文件。
http://ph7spot.com/musings/in-unix-everything-is-a-file

当程序退出时,系统会帮你关闭所有打开的文件描述符(包括套接字),为什么还要手动关闭?
1) 资源使用。 如果你使用了套接字却没有关闭它,那么那些你已不再使用的套接字的引用很可能依然保留着
2) 打开文件的数量限制。所有进程都只能够打开一定数量的文件,还记不记得前面说过每个连接都是一个文件。保留无用的连接会使进程逐步逼近这个上限,
迟早会出问题。

要获知当前进程所允许打开的数量,你可以使用Process.getrlimit(:NOFILE), 返回值是一个数组,包含了软限制(用户配置的设置)和硬限制(系统限制)

关闭写操作流会发送一个EOF到套接字的另一端

close_write和close_read方法在底层都利用了shutdown(2)
shutdown -- shut down part of a full-duplex connection
同close(2)明显不同的是:即便是存在着`连接的副本`,shutdown(2)也可以完全关闭该连接的某一部分。

连接副本是怎么回事?
可以使用Socket#dup创建文件描述符的副本。这实际上是在操作系统层面上利用dup(2)赋值了底层的文件描述符,不过这种情况极为罕见,你不太可能碰上
dup, dup2 -- duplicate an existing file descriptor
获取一个文件描述符副本的更常见的方法是利用Process.fork方法。该方法创建了一个全新的进程(仅在Unix环境中),这个进程和当前进程一模一样。除了
拥有当前进程在内存中的所有内容之外,新进程还通过dup(2)获得了所有已打开的文件描述符的副本。

close会关闭调用它的套接字实例,如果该套接字在系统中还有其他副本,那么这些副本不会被关闭,所占用的资源也不会被回收。没错,连接的其他副本仍然可以
交换数据,即便是在某个实例已经被关闭的情况下。

和close不同,shutdown会完全关闭在当前套接字及其副本上的通信。但是它并不会回收套接字所使用过的资源。每个套接字实例仍必须使用close结束它的
生命周期

注: 总结一下就是,原始连接和副本连接都需要close才能彻底释放资源

创建一个TCPServer实例返回的实际上并不是Socket实例,而是TCPServer实例。两者的接口几乎一样,但还是存在一些重要的差异。其中最明显的就是
TCPServer#accept只返回连接,而不返回remote_address。

使用这个Ruby包装器会返回两个TCP套接字,一个可以通过IPv4连接,另一个可以通过IPv6连接,两者都在同一端口上进行侦听。

Socket.tcp_server_socket(4481)

本章涉及的系统调用
Socket#bind           -> bind(2)
Socket#listen         -> listen(2)
Socket#accept         -> accept(2)
Socket#local_address  -> getsockname(2)
Socket#remote_address -> getpeername(2)
Socket#close          -> close(2)
Socket#close_write    -> shutdown(2)
Socket#shutdown       -> shutdown(2)

gopher port http://en.wikipedia.org/wiki/Gopher_(protocol)

Socket#bind       -> bind(2)
Socket#connection -> connect(2)

ch05 交换数据

在实际中,所有的数据都被编码为TCP/IP分组,在抵达终点的路上可能会途径多台路由器和主机。这个世界有点疯狂,所以最好记住并非事事都会一帆风顺,不过
我们也要感谢在这个疯狂的世界中辛勤工作的人们,他们为我们掩盖了那些不如意之处,使我们保留了对于世界的简单想象。

TCP是一个基于流的协议,如果我们在创建套接字时没传入:STREAM选项,那就无法创建TCP套接字

从协议层面上而言,TCP在网络上发送的是分组。

```
# 下面的代码会在网络上发送3份数据,一次一份
data = ['a', 'b', 'c']

for piece in data
  write_to_connection(piece)
end

# 下面的代码在一次操作中读取全部数据
result = read_from_connection #=> ['a', 'b', 'c']
```

这段代码想传达的是: 流并没有消息边界 的概念。即便是客户端发送了3份数据,服务器在读取的时候,也是将其作为一份数据来接收。它并不知道客户端是分批
发送的数据。
要注意的是,尽管并不保留消息边界,但是流中内容的次序还是会保留的。

底层的read(2),write(2)等系统调用都可以作用于文件、套接字、管道等上,这种抽象源自于操作系统核心本身,记住,一切皆为文件。

这个问题的关键在于tail -f根本就不会停止发送数据。如果tail没有数据发送。它就会一直等到有为止。这使得连接netcat的管道一直处于打开状态,因此
netcat也永远都不会停止向服务器发送数据。
服务器的read调用就一直被阻塞着,直到客户端发送完数据为止。在我们这个例子中,服务器就这样等待……等待……,在这期间它会将接收到的数据缓存起来,不
返回给应用程序。

采用这种方法实际上有可能会导致死锁。如果服务器试图从连接中读取1KB的数据,而客户端只发送了500B后就不再发送了,那么服务器就会一直傻等着那没发的
500B。

两种方法可以补救:
1) 客户端发送完500B后就再发送一个EOF
2) 服务器采用部分读取(partial read)的方式

EOF更像是一个状态事件(state event),如果一个套接字没有数据可写,它可以使用shutdown或close来表明自己不再需要写入任何数据。这就会导致一个
EOF事件被发送给在另一端进行读操作的进程,这样它就知道不会再有数据到达了。

就EOF而言,readpartial的工作方式不同于read,当接收到EOF时,read仅仅是返回,而readpartial则会产生一个EOFError异常,提醒我们要当心。


Socket#read -> read(2) fread(3)
Socket#readpartial -> read(2)

Socket#write -> write(2)